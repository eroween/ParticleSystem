#ifndef		__PARTICLE_SYSTEM_HPP__
# define	__PARTICLE_SYSTEM_HPP__

#include	<glm/glm.hpp>
#include	<vector>
#include	<list>
#include	"Particle.hpp"
#include	"Renderer.hpp"
#include	"Shape.hpp"

namespace	ParticleSystem
{
  //----------------------------------------
  // A Particle System component simulates fluid entities such as liquids,
  // clouds and flames by generating and animating large numbers of small 2D
  // images in the scene.
  //----------------------------------------
  class		ParticleSystem
  {
  public:
    //----------------------------------------
    // Constructor
    // @param :
    // maxParticles represent the maximum particle number that can be draw in the same time.
    //----------------------------------------
    ParticleSystem(const glm::vec3 &position = glm::vec3(0.0f, 0.0f, 0.0f),
		   const glm::vec3 &rotation = glm::vec3(0.0f, 0.0f, 0.0f),
		   const glm::vec3 &scale = glm::vec3(1.0f, 1.0f, 1.0f),
		   unsigned int maxParticles = 1000);

    //----------------------------------------
    // Destructor
    //----------------------------------------
    ~ParticleSystem(void);

  public:
    //----------------------------------------
    // Update is the function you need to call each frame with the time elapsed
    // between the two last frame for update particle position in the scene.
    //
    // Thread safe
    //----------------------------------------
    void			update(float elapsedTime);

    //----------------------------------------
    // This method is used to delete dead particles.
    // 
    // NOT Thread safe
    //----------------------------------------
    void		        reinit(void);

    //----------------------------------------
    // draw is the function you need to call when you want to render the particle system
    // in the scene.
    // 
    // @param:
    // projection : represent the matrix generated by a glm::perspective or glm::orthographic
    // modelview : represent the referencial matrix used to position the particle system in the world.
    //
    // Thread safe
    //----------------------------------------
    void			draw(const glm::mat4 &projection, const glm::mat4 &modelview,
				     const glm::vec3 &camPosition);

		    
    //----------------------------------------
    // Emit is used to emit particles in the scene manually.
    //----------------------------------------
    void			emit(int numberParticles);

  public:

    //----------------------------------------
    // GetRenderer let you set many attribute to the particleSystem renderer.
    // 
    // In the renderer you can set a rendering material.
    //----------------------------------------
    Renderer			*getRenderer(void)
    {
      return this->_renderer;
    }

  private:
    //----------------------------------------
    // This attribute is used to save the 3D position of the ParticleSystem
    //----------------------------------------
    glm::vec3			_position;

    //----------------------------------------
    // This attribute is used to save the 3D rotation of the ParticleSystem
    //----------------------------------------
    glm::vec3			_rotation;

    //----------------------------------------
    // This attribute is used to save the 3D scale of the ParticleSystem
    //----------------------------------------
    glm::vec3			_scale;

    //----------------------------------------
    // This attribute is used to save the max particles number that can be draw by this ParticleSystem 
    //----------------------------------------
    unsigned int		_maxParticles;

    //----------------------------------------
    // this attribute is used to contains particles that are used to draw animation.
    //----------------------------------------
    std::list<Particle *>	_particles;

    //----------------------------------------
    // this attribute is used to contains particles that can be used to draw animation.
    //----------------------------------------
    std::list<Particle *>	_unusedParticles;

    //----------------------------------------
    //
    //----------------------------------------
    Shape			*_shape;

    //----------------------------------------
    // this attribute is used to draw vertex // uvs // color on the screen.
    //----------------------------------------
    Renderer			*_renderer;

  };

}

#endif /* !__PARTICLE_SYSTEM_HPP__ */
